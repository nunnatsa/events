###
POST http://{{host}}:8080/reset

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

###

GET http://{{host}}:8080

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'Counter: 0\n', "Response body is not 'Counter: 0' but '" + response.body + "'");
    });
%}

###
PUT http://{{host}}:8080
Content-Type: text/plain

5

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'Added 5\n', "Response body is not 'Added 5' but '" + response.body + "'");
    });
%}

###
PUT http://{{host}}:8080
Content-Type: text/plain

aaa

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 400, "Response status is not 400");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'wrong input\n', "Response body is not 'wrong input' but '" + response.body + "'");
    });
%}
###
PUT http://{{host}}:8080
Content-Type: text/plain

5aaa


> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 400, "Response status is not 400");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'wrong input\n', "Response body is not 'wrong input' but '" + response.body + "'");
    });
%}

###
PUT http://{{host}}:8080
Content-Type: text/plain

34

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'Added 34\n', "Response body is not 'Added 34' but '" + response.body + "'");
    });
%}

###
PUT http://{{host}}:8080
Content-Type: text/plain

1

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'Added 1\n', "Response body is not 'Added 1' but '" + response.body + "'");
    });
%}

###

GET http://{{host}}:8080

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'Counter: 40\n', "Response body is not 'Counter: 40' but '" + response.body + "'");
    });
%}

###
PUT http://{{host}}:8080
Content-Type: text/plain

10

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'Added 10\n', "Response body is not 'Added 10' but '" + response.body + "'");
    });
%}

###
GET http://{{host}}:8080

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'Counter: 50\n', "Response body is not 'Counter: 50' but '" + response.body + "'");
    });
%}

###
POST http://{{host}}:8080/reset

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

###

GET http://{{host}}:8080

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
        var type = response.contentType.mimeType;
        client.assert(type === "text/plain", "Expected 'text/plain' but received '" + type + "'");
        client.assert(response.body === 'Counter: 0\n', "Response body is not 'Counter: 0' but '" + response.body + "'");
    });
%}
